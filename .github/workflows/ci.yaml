name: flask CI

on:
  push:
    branches: "master"
  pull_request:
    branches: "master"

jobs:
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./flask-app
    strategy:
      matrix:
        python-version: [3.10]
        architecture: [x64]
    steps:
      - name: Check-out git repository  
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }} - ${{ matrix.architecture }}
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"
          
      - name: Install project dependencies 
        working-directory: ./flask-app
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
 
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
        env:
          CI: true

      # Build the package
      - name: Build
        run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        working-directory: ./flask-app

        # Setup sonar-scanners
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v8

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets._GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: flask-apps
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.sources=src/
            -Dsonar.verbose=true

  frontend-security:
    needs: frontend-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./flask-app
    steps:
      - name: Check out repository
        uses: actions/checkout@master

      - name: Check out repository
        uses: actions/checkout@v2
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Install Snyk CLI
        uses: snyk/actions/setup@master
        with:
          version: latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}  
         
      - name: Snyk Authenticate    
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code Test
        run: snyk code test --all-projects
        continue-on-error: true

  frontend-image:
    needs: frontend-security
    runs-on: ubuntu-latest
    permissions:
      contents: read 
      security-events: write 
      actions: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and push backend Docker image
      working-directory: ./flask-app
      run: |
        docker build . -t ${{ secrets.DOCKER_USERNAME }}/frontend-flask-app
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        # docker image tag ${{ secrets.DOCKER_USERNAME }}/frontend-flask-app ${{ secrets.DOCKER_USERNAME }}/frontend-flask-app:latest 
        # docker push ${{ secrets.DOCKER_USERNAME }}/frontend-flask-app:latest 
        docker image tag ${{ secrets.DOCKER_USERNAME }}/frontend-flask-app ${{ secrets.DOCKER_USERNAME }}/frontend-flask-app
        docker push ${{ secrets.DOCKER_USERNAME }}/frontend-flask-app        

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/frontend-flask-app'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Install Snyk CLI
      uses: snyk/actions/setup@master
      with:
        snyk-token: ${{ secrets.SNYK_TOKEN }}
       
    - name: Snyk Authenticate    
      run: snyk auth ${{ secrets.SNYK_TOKEN }}
  
    - name: Snyk Container monitor
      run: snyk container monitor ${{ secrets.DOCKER_USERNAME }}/frontend-flask-app --file=Dockerfile   
      working-directory: ./flask-app

    - name: Run Snyk to check for vulnerabilities in the Docker image
      uses: snyk/actions/docker@master
      with:
        image: ${{ secrets.DOCKER_USERNAME }}/frontend-flask-app
        args: --file=flask-app/Dockerfile --severity-threshold=high
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

  # k8s-manifest-scan:
  #   needs: frontend-security
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Run Snyk to check Kubernetes manifest file for issues
  #       uses: snyk/actions/iac@master
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #       with:
  #         file: kubernetes-manifest/
  #         args: --severity-threshold=high
